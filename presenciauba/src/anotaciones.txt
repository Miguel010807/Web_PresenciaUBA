EXPLICACIÓN DE Login.jsx
-----------------------------------
IMPORTS
-----------------------------------
- useState: Hook de React para manejar estados internos del componente.
- api: archivo de configuración de Axios que sirve para enviar peticiones al backend.

-----------------------------------
ESTADOS DEL COMPONENTE
-----------------------------------
- correo: guarda lo que el usuario escribe en el campo de email.
- password: guarda lo que el usuario escribe en el campo de contraseña.
- error: almacena un mensaje de error si las credenciales son inválidas o si no hay conexión al WiFi institucional.

-----------------------------------
3FUNCIÓN handleSubmit
-----------------------------------
- Se ejecuta al enviar el formulario.
- e.preventDefault(): evita que la página se recargue automáticamente.
- api.post("/login", { correo, password }): envía los datos al backend.
- Si la respuesta es correcta:
    - Guarda el token en localStorage.
    - Llama a la función onLogin() con los datos del usuario, para avisar al componente padre (App.jsx) que el login fue exitoso.
- Si hay error:
    - Actualiza el estado "error" y muestra un mensaje en pantalla.

-----------------------------------
INTERFAZ DEL USUARIO (JSX)
-----------------------------------
- Contenedor principal con el título "Presencia UBA".
- Formulario con:
    - Un input para correo institucional.
    - Un input para contraseña.
    - Un botón para enviar el formulario.
- Si existe un error, se muestra un mensaje en rojo debajo del formulario.

-----------------------------------
EXPORT
-----------------------------------
- export default Login: permite usar este componente en App.jsx.

-----------------------------------
  RESUMEN
-----------------------------------
Login.jsx:
- Pide correo institucional y contraseña al usuario.
- Envía esos datos al backend para validación.
- Si la autenticación es exitosa, guarda un token en localStorage.
- Si falla, muestra un mensaje de error.

----------------------------------------------

EXPLICACIÓN DE QRScanner.jsx

-----------------------------------
IMPORTS
-----------------------------------
- useState: Hook de React para manejar el estado del resultado del escaneo.
- QrReader: Componente de la librería react-qr-reader que permite leer códigos QR con la cámara del dispositivo.
- api: archivo de configuración de Axios para enviar la información al backend.

-----------------------------------
ESTADO DEL COMPONENTE
-----------------------------------
- resultado: almacena un mensaje de éxito o error luego de escanear el QR.

-----------------------------------
FUNCIÓN handleScan
-----------------------------------
- Recibe como parámetro el contenido del QR leído (data).
- Si existe data:
    - Obtiene el token de autenticación guardado en localStorage.
    - Hace una petición POST al backend (/asistencia/materia) enviando el QR escaneado.
    - Si la respuesta es correcta:
        - Actualiza el estado "resultado" mostrando un mensaje de éxito con la materia registrada.
    - Si ocurre un error:
        - Muestra un mensaje indicando que no se pudo registrar la asistencia.

-----------------------------------
INTERFAZ DEL USUARIO (JSX)
-----------------------------------
- Un contenedor con el título "Escanear código QR del aula".
- El componente QrReader:
    - Usa la cámara del dispositivo para detectar códigos QR.
    - Cuando detecta un código, llama a handleScan para procesarlo.
- Un párrafo que muestra el mensaje guardado en "resultado" (ejemplo: éxito o error).

-----------------------------------
EXPORT
-----------------------------------
- export default QRScanner: permite usar este componente en App.jsx.

-----------------------------------
RESUMEN
-----------------------------------
QRScanner.jsx:
- Usa la cámara del dispositivo para leer un código QR único de cada aula.
- Envía el QR al backend junto con el token del usuario.
- Si es válido, registra la asistencia en la materia correspondiente.
- Muestra en pantalla un mensaje de éxito o error según el resultado.
-----------------------------------

EXPLICACIÓN DE StatusCard.jsx

-----------------------------------
IMPORTS
-----------------------------------
- React: necesario para crear componentes funcionales en React.

-----------------------------------
PROPS
-----------------------------------
- usuario: objeto que contiene información del usuario (nombre, apellido, rol).
- conectado: booleano que indica si el usuario está conectado a la red Wi-Fi institucional.

-----------------------------------
INTERFAZ DEL USUARIO (JSX)
-----------------------------------
- Contenedor principal con clase "status-card".
- Título "Estado de sesión".
- Si el usuario está autenticado:
    - Muestra el nombre completo y el rol del usuario con un icono de check.
- Si no está autenticado:
    - Muestra "No autenticado" con un icono de alerta.
- Muestra también si está conectado al Wi-Fi UBA o no.

-----------------------------------
EXPORT
-----------------------------------
- export default StatusCard: permite usar este componente en App.jsx.

-----------------------------------
RESUMEN
-----------------------------------
StatusCard.jsx:
- Permite al usuario ver rápidamente su estado de autenticación y conexión.
- Es visual y simple, mostrando información relevante en tarjetas.
- Se actualiza automáticamente según las props recibidas del componente padre.
